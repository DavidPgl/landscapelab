[gd_scene load_steps=18 format=2]

[ext_resource path="res://UI/CustomElements/AutoIconButton.tscn" type="PackedScene" id=2]
[ext_resource path="res://UI/CustomElements/AutoTextureButton.shader" type="Shader" id=3]
[ext_resource path="res://UI/Layers/LayerManagement/ObjectLayerManagement.gd" type="Script" id=4]
[ext_resource path="res://Resources/Icons/ModernLandscapeLab/file.svg" type="Texture" id=9]

[sub_resource type="ShaderMaterial" id=2]
resource_local_to_scene = true
shader = ExtResource( 3 )
shader_param/color = Vector3( 0, 0, 0 )
shader_param/rotation_radians = null
shader_param/color_length_modulate_threshold = 1.5

[sub_resource type="ShaderMaterial" id=3]
resource_local_to_scene = true
shader = ExtResource( 3 )
shader_param/color = Vector3( 0, 0, 0 )
shader_param/rotation_radians = null
shader_param/color_length_modulate_threshold = 1.5

[sub_resource type="StreamTexture" id=4]
flags = 4
load_path = "res://.import/vector_edit.svg-3ffa31ff1c5fa72970ff364b36d3d365.stex"

[sub_resource type="GDScript" id=5]
script/source = "tool
extends TextureButton
class_name AutoTextureButton


#
# Instead of using a separate texture for each state (default, pressed, ...),
# only colors have to be defined for this AutoTextureButton. The texture is
# then automatically colored accordingly.
# Also provides additional functionality for styling buttons such as rotating.
#

var icon_folder = \"ModernLandscapeLab\" # TODO: Global setting

export(String) var texture_name setget set_texture_name, get_texture_name

export(Color) var default_color
export(Color) var pressed_color
export(Color) var hover_color
export(Color) var disabled_color
export(Color) var focused_color


func _enter_tree() -> void:
	_update_texture()


# Update the button's base texture
func _update_texture():
	if not texture_name.empty():
		var full_path = \"res://Resources/Icons\".plus_file(icon_folder).plus_file(texture_name) + \".svg\"
		assert(File.new().file_exists(full_path), \"%s: No icon with name '%s' found in icon folder '%s'!\" % [name, texture_name, icon_folder])
		
		texture_normal = load(full_path)


func set_texture_name(new_name: String):
	texture_name = new_name
	_update_texture()


func get_texture_name():
	return texture_name


# Rotate the sprite clockwise around its center by the given radians.
func set_rotation_radians(radians: float):
	material.set_shader_param(\"rotation_radians\", radians)


# Rotate the sprite clockwise around its center by the given degrees.
func set_rotation_degrees(degrees: float):
	set_rotation_radians(deg2rad(degrees))


# Overwritten default set_disabled function to also set the corresponding color
func set_disabled(new_disabled: bool):
	.set_disabled(new_disabled)
	
	if new_disabled:
		_set_color(disabled_color)
	else:
		_set_color(default_color)


# Called when the node enters the scene tree for the first time.
func _ready():
	connect(\"mouse_entered\", self, \"_mouse_entered\")
	connect(\"mouse_exited\", self, \"_mouse_exited\")
	connect(\"button_up\", self, \"_button_up\")
	connect(\"button_down\", self, \"_button_down\")
	
	if disabled:
		_set_color(disabled_color)
	else:
		_set_color(default_color)
	
	# If the button is toggled by default, set the color at the start
	if toggle_mode and pressed:
		_set_color(pressed_color)


func _set_color(color: Color):
	material.set_shader_param(\"color\", Vector3(color.r, color.g, color.b))


func _mouse_entered():
	if disabled:
		return
	
	if not pressed:
		_set_color(hover_color)


func _mouse_exited():
	if disabled:
		return
	
	if pressed:
		_set_color(pressed_color)
	else:
		_set_color(default_color)


func _button_up():
	if disabled:
		return
	
	if not toggle_mode or not pressed:
		_set_color(hover_color)


func _button_down():
	if disabled:
		return
	
	_set_color(pressed_color)
"

[sub_resource type="ShaderMaterial" id=6]
resource_local_to_scene = true
shader = ExtResource( 3 )
shader_param/color = Vector3( 0, 0, 0 )
shader_param/rotation_radians = null
shader_param/color_length_modulate_threshold = 1.5

[sub_resource type="StreamTexture" id=7]
flags = 4
load_path = "res://.import/vector_add.svg-61d6148d08649cdc8484ddba5524b479.stex"

[sub_resource type="GDScript" id=8]
script/source = "tool
extends TextureButton
class_name AutoTextureButton


#
# Instead of using a separate texture for each state (default, pressed, ...),
# only colors have to be defined for this AutoTextureButton. The texture is
# then automatically colored accordingly.
# Also provides additional functionality for styling buttons such as rotating.
#

var icon_folder = \"ModernLandscapeLab\" # TODO: Global setting

export(String) var texture_name setget set_texture_name, get_texture_name

export(Color) var default_color
export(Color) var pressed_color
export(Color) var hover_color
export(Color) var disabled_color
export(Color) var focused_color


func _enter_tree() -> void:
	_update_texture()


# Update the button's base texture
func _update_texture():
	if not texture_name.empty():
		var full_path = \"res://Resources/Icons\".plus_file(icon_folder).plus_file(texture_name) + \".svg\"
		assert(File.new().file_exists(full_path), \"%s: No icon with name '%s' found in icon folder '%s'!\" % [name, texture_name, icon_folder])
		
		texture_normal = load(full_path)


func set_texture_name(new_name: String):
	texture_name = new_name
	_update_texture()


func get_texture_name():
	return texture_name


# Rotate the sprite clockwise around its center by the given radians.
func set_rotation_radians(radians: float):
	material.set_shader_param(\"rotation_radians\", radians)


# Rotate the sprite clockwise around its center by the given degrees.
func set_rotation_degrees(degrees: float):
	set_rotation_radians(deg2rad(degrees))


# Overwritten default set_disabled function to also set the corresponding color
func set_disabled(new_disabled: bool):
	.set_disabled(new_disabled)
	
	if new_disabled:
		_set_color(disabled_color)
	else:
		_set_color(default_color)


# Called when the node enters the scene tree for the first time.
func _ready():
	connect(\"mouse_entered\", self, \"_mouse_entered\")
	connect(\"mouse_exited\", self, \"_mouse_exited\")
	connect(\"button_up\", self, \"_button_up\")
	connect(\"button_down\", self, \"_button_down\")
	
	if disabled:
		_set_color(disabled_color)
	else:
		_set_color(default_color)
	
	# If the button is toggled by default, set the color at the start
	if toggle_mode and pressed:
		_set_color(pressed_color)


func _set_color(color: Color):
	material.set_shader_param(\"color\", Vector3(color.r, color.g, color.b))


func _mouse_entered():
	if disabled:
		return
	
	if not pressed:
		_set_color(hover_color)


func _mouse_exited():
	if disabled:
		return
	
	if pressed:
		_set_color(pressed_color)
	else:
		_set_color(default_color)


func _button_up():
	if disabled:
		return
	
	if not toggle_mode or not pressed:
		_set_color(hover_color)


func _button_down():
	if disabled:
		return
	
	_set_color(pressed_color)
"

[sub_resource type="ShaderMaterial" id=9]
resource_local_to_scene = true
shader = ExtResource( 3 )
shader_param/color = Vector3( 0, 0, 0 )
shader_param/rotation_radians = null
shader_param/color_length_modulate_threshold = 1.5

[sub_resource type="StreamTexture" id=10]
flags = 4
load_path = "res://.import/vector_modify.svg-1b695bd97acdb5b9ff770f7e3d5b7ca8.stex"

[sub_resource type="GDScript" id=11]
script/source = "tool
extends TextureButton
class_name AutoTextureButton


#
# Instead of using a separate texture for each state (default, pressed, ...),
# only colors have to be defined for this AutoTextureButton. The texture is
# then automatically colored accordingly.
# Also provides additional functionality for styling buttons such as rotating.
#

var icon_folder = \"ModernLandscapeLab\" # TODO: Global setting

export(String) var texture_name setget set_texture_name, get_texture_name

export(Color) var default_color
export(Color) var pressed_color
export(Color) var hover_color
export(Color) var disabled_color
export(Color) var focused_color


func _enter_tree() -> void:
	_update_texture()


# Update the button's base texture
func _update_texture():
	if not texture_name.empty():
		var full_path = \"res://Resources/Icons\".plus_file(icon_folder).plus_file(texture_name) + \".svg\"
		assert(File.new().file_exists(full_path), \"%s: No icon with name '%s' found in icon folder '%s'!\" % [name, texture_name, icon_folder])
		
		texture_normal = load(full_path)


func set_texture_name(new_name: String):
	texture_name = new_name
	_update_texture()


func get_texture_name():
	return texture_name


# Rotate the sprite clockwise around its center by the given radians.
func set_rotation_radians(radians: float):
	material.set_shader_param(\"rotation_radians\", radians)


# Rotate the sprite clockwise around its center by the given degrees.
func set_rotation_degrees(degrees: float):
	set_rotation_radians(deg2rad(degrees))


# Overwritten default set_disabled function to also set the corresponding color
func set_disabled(new_disabled: bool):
	.set_disabled(new_disabled)
	
	if new_disabled:
		_set_color(disabled_color)
	else:
		_set_color(default_color)


# Called when the node enters the scene tree for the first time.
func _ready():
	connect(\"mouse_entered\", self, \"_mouse_entered\")
	connect(\"mouse_exited\", self, \"_mouse_exited\")
	connect(\"button_up\", self, \"_button_up\")
	connect(\"button_down\", self, \"_button_down\")
	
	if disabled:
		_set_color(disabled_color)
	else:
		_set_color(default_color)
	
	# If the button is toggled by default, set the color at the start
	if toggle_mode and pressed:
		_set_color(pressed_color)


func _set_color(color: Color):
	material.set_shader_param(\"color\", Vector3(color.r, color.g, color.b))


func _mouse_entered():
	if disabled:
		return
	
	if not pressed:
		_set_color(hover_color)


func _mouse_exited():
	if disabled:
		return
	
	if pressed:
		_set_color(pressed_color)
	else:
		_set_color(default_color)


func _button_up():
	if disabled:
		return
	
	if not toggle_mode or not pressed:
		_set_color(hover_color)


func _button_down():
	if disabled:
		return
	
	_set_color(pressed_color)
"

[sub_resource type="ShaderMaterial" id=12]
resource_local_to_scene = true
shader = ExtResource( 3 )
shader_param/color = Vector3( 0, 0, 0 )
shader_param/rotation_radians = null
shader_param/color_length_modulate_threshold = 1.5

[sub_resource type="StreamTexture" id=13]
flags = 4
load_path = "res://.import/vector_save.svg-a156fab02de879e0fa679848816257ee.stex"

[sub_resource type="GDScript" id=14]
script/source = "tool
extends TextureButton
class_name AutoTextureButton


#
# Instead of using a separate texture for each state (default, pressed, ...),
# only colors have to be defined for this AutoTextureButton. The texture is
# then automatically colored accordingly.
# Also provides additional functionality for styling buttons such as rotating.
#

var icon_folder = \"ModernLandscapeLab\" # TODO: Global setting

export(String) var texture_name setget set_texture_name, get_texture_name

export(Color) var default_color
export(Color) var pressed_color
export(Color) var hover_color
export(Color) var disabled_color
export(Color) var focused_color


func _enter_tree() -> void:
	_update_texture()


# Update the button's base texture
func _update_texture():
	if not texture_name.empty():
		var full_path = \"res://Resources/Icons\".plus_file(icon_folder).plus_file(texture_name) + \".svg\"
		assert(File.new().file_exists(full_path), \"%s: No icon with name '%s' found in icon folder '%s'!\" % [name, texture_name, icon_folder])
		
		texture_normal = load(full_path)


func set_texture_name(new_name: String):
	texture_name = new_name
	_update_texture()


func get_texture_name():
	return texture_name


# Rotate the sprite clockwise around its center by the given radians.
func set_rotation_radians(radians: float):
	material.set_shader_param(\"rotation_radians\", radians)


# Rotate the sprite clockwise around its center by the given degrees.
func set_rotation_degrees(degrees: float):
	set_rotation_radians(deg2rad(degrees))


# Overwritten default set_disabled function to also set the corresponding color
func set_disabled(new_disabled: bool):
	.set_disabled(new_disabled)
	
	if new_disabled:
		_set_color(disabled_color)
	else:
		_set_color(default_color)


# Called when the node enters the scene tree for the first time.
func _ready():
	connect(\"mouse_entered\", self, \"_mouse_entered\")
	connect(\"mouse_exited\", self, \"_mouse_exited\")
	connect(\"button_up\", self, \"_button_up\")
	connect(\"button_down\", self, \"_button_down\")
	
	if disabled:
		_set_color(disabled_color)
	else:
		_set_color(default_color)
	
	# If the button is toggled by default, set the color at the start
	if toggle_mode and pressed:
		_set_color(pressed_color)


func _set_color(color: Color):
	material.set_shader_param(\"color\", Vector3(color.r, color.g, color.b))


func _mouse_entered():
	if disabled:
		return
	
	if not pressed:
		_set_color(hover_color)


func _mouse_exited():
	if disabled:
		return
	
	if pressed:
		_set_color(pressed_color)
	else:
		_set_color(default_color)


func _button_up():
	if disabled:
		return
	
	if not toggle_mode or not pressed:
		_set_color(hover_color)


func _button_down():
	if disabled:
		return
	
	_set_color(pressed_color)
"

[node name="ObjectLayerManagement" type="HBoxContainer"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -2.24493
margin_right = -2.24487
script = ExtResource( 4 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="List" parent="." instance=ExtResource( 2 )]
material = SubResource( 2 )
margin_right = 30.0
margin_bottom = 1080.0
toggle_mode = true
texture_normal = ExtResource( 9 )
texture_name = "file"

[node name="ListWindow" type="WindowDialog" parent="List"]
visible = true
margin_right = 327.0
margin_bottom = 324.0
size_flags_horizontal = 3
size_flags_vertical = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="ItemList" type="ItemList" parent="List/ListWindow"]
margin_left = 14.0
margin_top = 14.0
margin_right = 314.0
margin_bottom = 314.0
rect_min_size = Vector2( 300, 300 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Edit" parent="." instance=ExtResource( 2 )]
material = SubResource( 3 )
margin_left = 38.0
margin_right = 68.0
margin_bottom = 1080.0
toggle_mode = true
texture_normal = SubResource( 4 )
script = SubResource( 5 )
pressed_color = Color( 0, 0, 0, 1 )
hover_color = Color( 0, 0, 0, 1 )
disabled_color = Color( 0, 0, 0, 1 )
focused_color = Color( 0, 0, 0, 1 )

[node name="Add" parent="." instance=ExtResource( 2 )]
material = SubResource( 6 )
margin_left = 76.0
margin_right = 106.0
margin_bottom = 1080.0
toggle_mode = true
texture_normal = SubResource( 7 )
script = SubResource( 8 )
pressed_color = Color( 0, 0, 0, 1 )
hover_color = Color( 0, 0, 0, 1 )
disabled_color = Color( 0, 0, 0, 1 )
focused_color = Color( 0, 0, 0, 1 )

[node name="Modify" parent="." instance=ExtResource( 2 )]
material = SubResource( 9 )
margin_left = 114.0
margin_right = 144.0
margin_bottom = 1080.0
toggle_mode = true
texture_normal = SubResource( 10 )
script = SubResource( 11 )
pressed_color = Color( 0, 0, 0, 1 )
hover_color = Color( 0, 0, 0, 1 )
disabled_color = Color( 0, 0, 0, 1 )
focused_color = Color( 0, 0, 0, 1 )

[node name="Save" parent="." instance=ExtResource( 2 )]
material = SubResource( 12 )
margin_left = 152.0
margin_right = 182.0
margin_bottom = 1080.0
toggle_mode = true
texture_normal = SubResource( 13 )
script = SubResource( 14 )
pressed_color = Color( 0, 0, 0, 1 )
hover_color = Color( 0, 0, 0, 1 )
disabled_color = Color( 0, 0, 0, 1 )
focused_color = Color( 0, 0, 0, 1 )
