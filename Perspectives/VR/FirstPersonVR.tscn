[gd_scene load_steps=5 format=2]

[ext_resource path="res://addons/godot-openvr/scenes/ovr_controller.tscn" type="PackedScene" id=1]
[ext_resource path="res://addons/vr-common/functions/Function_Teleport.tscn" type="PackedScene" id=2]
[ext_resource path="res://addons/vr-common/functions/Function_Teleport.gd" type="Script" id=3]

[sub_resource type="GDScript" id=1]

script/source = "extends ARVRController

signal controller_activated(controller)

var ovr_render_model
var components = Array()
var ws = 0

func _ready():
	# instance our render model object
	ovr_render_model = preload(\"res://addons/godot-openvr/OpenVRRenderModel.gdns\").new()
	
	# hide to begin with
	visible = false

func apply_world_scale():
	var new_ws = ARVRServer.world_scale
	if (ws != new_ws):
		ws = new_ws
		$Controller_mesh.scale = Vector3(ws, ws, ws)

func load_controller_mesh(controller_name):
	if ovr_render_model.load_model(controller_name.substr(0, controller_name.length()-2)):
		return ovr_render_model
	
	if ovr_render_model.load_model(\"generic_controller\"):
		return ovr_render_model
	
	return Mesh.new()

func _process(delta):
	if !get_is_active():
		visible = false
		return
	
	# always set our world scale, user may end up changing this
	apply_world_scale()
	
	if visible:
		return
	
	# became active? lets handle it...
	var controller_name = get_controller_name()
	print(\"Controller \" + controller_name + \" became active\")
			
	# attempt to load a mesh for this
	$Controller_mesh.mesh = load_controller_mesh(controller_name)
			
	# make it visible
	visible = true
	emit_signal(\"controller_activated\", self)
"

[node name="FirstPersonVR" type="Spatial"]

[node name="ARVROrigin" type="ARVROrigin" parent="."]

[node name="ARVRCamera" type="ARVRCamera" parent="ARVROrigin"]
current = true
far = 50000.0

[node name="OVRController" type="ARVRController" parent="ARVROrigin" instance=ExtResource( 1 )]
controller_id = 1
script = SubResource( 1 )

[node name="Function_Teleport" type="KinematicBody" parent="ARVROrigin/OVRController" instance=ExtResource( 2 )]
input_ray_pickable = false
collision/safe_margin = 0.01
script = ExtResource( 3 )
origin = NodePath("../../../FirstPersonVR/ARVROrigin")
no_collision_color = Color( 0.176471, 0.313726, 0.862745, 1 )
floor_threshold = 0.75

[node name="OVRController2" type="ARVRController" parent="ARVROrigin" instance=ExtResource( 1 )]
controller_id = 2
script = SubResource( 1 )

